name: Express App Build

run-name: Express App Production Container Build

on:
  push:
    branches: [ main ]

permissions:
  # id-token: write #
  contents: write
  pull-requests: read

jobs:
  update:
    name: Update Express App Containers
    runs-on: ubuntu-latest
    steps:
      - run: echo "Job triggered by a ${{ github.event_name }} event to main."
      - run: echo "---HEAD COMMIT MESSAGE--"
      - run: echo "${{ github.event.head_commit.message }}"
      - run: echo "------------------------"

      - uses: actions/github-script@v7
        id: getPullRequestData
        with:
          script: |
            return (
              await github.rest.repos.listPullRequestsAssociatedWithCommit({
                commit_sha: context.sha,
                owner: context.repo.owner,
                repo: context.repo.repo,
              })
            ).data[0];

      - name: Pull Request data
        run: |
          echo '${{ fromJson(steps.getPullRequestData.outputs.result).number }}'
          echo '${{ fromJson(steps.getPullRequestData.outputs.result).title }}'
          echo '${{ fromJson(steps.getPullRequestData.outputs.result).body }}'

      - name: Checkout Express App Code
        uses: actions/checkout@v4

      - name: "Increment Express App Version"
        id: updateVersion
        env:
          prBody: ${{ fromJson(steps.getPullRequestData.outputs.result).body }}
        shell: pwsh
        run: |
          $version = [regex]::matches($env:prBody, '(?<=\[version:).*(?=])').value
          $major = $env:prBody -match '(?<=\[)major(?=])'
          $minor = $env:prBody -match '(?<=\[)minor(?=])'
          $build = $env:prBody -match '(?<=\[)build(?=])'

          $packageJson = Get-Content -Path .\package.json | ConvertFrom-Json
          $packageJsonVer = [System.Version]$packageJson.version

          Write-Host "Current package.json version: $packageJsonVer"
          Write-Host "Version found in commit message: $version"
          Write-Host "Bump Major: $major"
          Write-Host "Bump Minor: $minor"
          Write-Host "Bump Build: $build"

          try {
            $version = [System.Version]$version
            $newVersion = "{0}.{1}.{2}" -f $version.Major, $version.Minor, $version.Build
          } catch {
            $newVersion = $null
          }

          if ($newVersion) {
            $targetVersion = $newVersion
          } elseif ($major) {
            $targetVersion = "{0}.{1}.{2}" -f ($packageJsonVer.Major + 1), $packageJsonVer.Minor, $packageJsonVer.Build
          } elseif ($minor) {
            $targetVersion = "{0}.{1}.{2}" -f $packageJsonVer.Major, ($packageJsonVer.Minor + 1), $packageJsonVer.Build
          } else {
            $targetVersion = "{0}.{1}.{2}" -f $packageJsonVer.Major, $packageJsonVer.Minor, ($packageJsonVer.Build + 1)
          }

          $packageJson.version = $newVersion
          $packageJson | ConvertTo-Json | Set-Content -Path .\package.json

          Write-Output "ipamVersion=$targetVersion" >> $Env:GITHUB_OUTPUT

      - name: "Create Express App ZIP Asset"
        id: createZipAsset
        shell: pwsh
        run: |
          Compress-Archive -Path .\app.js -DestinationPath .\assets\express.zip -Force

      - name: Checkin Updated Express Code
        id: checkinCode
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "expressactions@users.noreply.github.com"
          git commit -a -m "Updated Express App Version"
          git push

      # - name: "Publish Express App Release"
      #   id: publishRelease
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: v${{ steps.updateVersion.outputs.ipamVersion }}
      #     release_name: Release v${{ steps.updateVersion.outputs.ipamVersion }}
      #     body: |
      #       Express App Release
      #     draft: false
      #     prerelease: false

      - name: Publish Express App Release Asset
        id: publishRelease
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tagName: v${{ steps.updateVersion.outputs.ipamVersion }}
        run: |
          gh release create "$tagName" \
            --repo="$GITHUB_REPOSITORY" \
            --title="$tagName" \
            --notes "Express App Release"

      # - name: Upload Express App Release Asset
      #   id: uploadReleaseAsset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.publishRelease.outputs.upload_url }}
      #     asset_path: ./assets/express.zip
      #     asset_name: express.zip
      #     asset_content_type: application/zip

      - name: Publish Express App Release Asset
        id: uploadReleaseAsset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tagName: v${{ steps.updateVersion.outputs.ipamVersion }}
          assetPath: ./assets/express.zip
        run: |
          gh release upload "$tagName" "$assetPath"
